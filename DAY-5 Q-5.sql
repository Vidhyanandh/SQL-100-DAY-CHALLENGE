CREATE TABLE drivers (
    driver_id INT PRIMARY KEY,
    driver_name VARCHAR(100),
    driver_rating FLOAT,
    join_date DATE
);

CREATE TABLE passengers (
    passenger_id INT PRIMARY KEY,
    passenger_name VARCHAR(100),
    passenger_rating FLOAT,
    join_date DATE
);


CREATE TABLE rides (
    ride_id INT PRIMARY KEY,
    driver_id INT,
    passenger_id INT,
    ride_date DATE,
    ride_distance FLOAT,
    ride_cost FLOAT,
    FOREIGN KEY (driver_id) REFERENCES drivers(driver_id),
    FOREIGN KEY (passenger_id) REFERENCES passengers(passenger_id)
);


INSERT INTO drivers (driver_id, driver_name, driver_rating, join_date) VALUES
(1, 'John Doe', 4.8, '2022-01-15'),
(2, 'Jane Smith', 4.5, '2021-07-22'),
(3, 'Bob Johnson', 4.9, '2020-11-30');


INSERT INTO passengers (passenger_id, passenger_name, passenger_rating, join_date) VALUES
(1, 'Alice Brown', 4.7, '2022-03-11'),
(2, 'Charlie Green', 4.6, '2021-09-19'),
(3, 'David White', 4.8, '2020-05-25');


INSERT INTO rides (ride_id, driver_id, passenger_id, ride_date, ride_distance, ride_cost) VALUES
(1, 1, 1, '2023-06-01', 12.5, 25.0),
(2, 2, 2, '2023-06-02', 8.0, 16.0),
(3, 3, 3, '2023-06-03', 10.2, 20.4),
(4, 1, 2, '2023-06-04', 7.5, 15.0),
(5, 2, 3, '2023-06-05', 15.0, 30.0),
(6, 2, 3, '2023-06-07', 15.0, 30.0);

SELECT * FROM passengers;
SELECT * FROM drivers;
SELECT * FROM rides;


-- Question 1: Find the driver with the highest Rating (return driver_name and rating)

-- METHOD:1

SELECT
    driver_id,
    driver_name,
    driver_rating
FROM
    drivers
WHERE driver_rating = (
			           SELECT MAX(driver_rating) as highest_rating
					   FROM drivers
                       );


-- METHOD:2

SELECT driver_id,
	   driver_name,
       driver_rating
FROM drivers
ORDER BY driver_rating DESC
LIMIT 1 ;


-- Question 2: Calculate the Total Revenue Generated by Each Driver (return driver_name, id, revenue)

-- METHOD:1 USING JOINS

SELECT d.driver_id,
	   d.driver_name,
       SUM(r.ride_cost) as total_revenue
FROM drivers d
LEFT JOIN rides r
    ON d.driver_id=r.driver_id
GROUP BY d.driver_id,d.driver_name;

-- METHOD:2 USING SUB-QUERY

SELECT d.driver_id,
	   d.driver_name,
       (SELECT SUM(r.ride_cost) 
			   FROM rides r
               WHERE r.driver_id=d.driver_id
               GROUP BY r.driver_id) as total_income
FROM drivers d;


-- Question 3: Find the Passenger with the Highest Number of Rides (return passenger_name, id, no of rides)

-- METHOD:1 USING JOINS

    SELECT p.passenger_id,
		   p.passenger_name,
           COUNT(r.ride_id) as no_of_rides
	FROM passengers p
    LEFT JOIN rides r
    ON p.passenger_id=r.passenger_id
    GROUP BY p.passenger_id,
			p.passenger_name
	ORDER BY no_of_rides DESC
    LIMIT 1;
    
-- METHOD :2 USING SUB QUERY

SELECT passenger_name, passenger_id, ride_count
FROM (
    SELECT p.passenger_name, p.passenger_id, COUNT(r.ride_id) AS ride_count
    FROM passengers p, rides r
    WHERE p.passenger_id = r.passenger_id
    GROUP BY p.passenger_name, p.passenger_id
) AS ride_counts
WHERE ride_count = (
    SELECT MAX(ride_count)
    FROM (
        SELECT COUNT(r.ride_id) AS ride_count
        FROM rides r
        GROUP BY r.passenger_id
    ) AS max_ride_counts
);

-- Q4: IDENTIFY THE MOST FREQUENT RIDE DISTANCE

-- METHOD 1 USING ORDER BY 

SELECT ride_distance
FROM rides
GROUP BY ride_distance
order by COUNT(*) desc
LIMIT 1 ;

-- METHOD 2 USING SUB QUERY


SELECT ride_distance
FROM (
SELECT ride_distance,COUNT(*) as no_of_times
FROM rides
GROUP BY ride_distance
ORDER BY COUNT(*) desc
LIMIT 1) as sub_query;

SELECT ride_distance
FROM(
SELECT ride_distance,COUNT(*) as distance_count
FROM rides
GROUP BY ride_distance
) distance_counts
WHERE distance_count=(
SELECT MAX(distance_count) 
FROM (
SELECT COUNT(*) as distance_count
FROM rides
GROUP BY ride_distance
) AS max_distance_counts
);

        


    



